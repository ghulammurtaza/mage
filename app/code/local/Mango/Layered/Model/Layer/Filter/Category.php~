<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    Mage
 * @package     Mage_Catalog
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
/**
 * Layer category filter
 *
 * @category    Mage
 * @package     Mage_Catalog
 * @author      Magento Core Team <core@magentocommerce.com>
 */
class Mango_Layered_Model_Layer_Filter_Category extends Mage_Catalog_Model_Layer_Filter_Category {
    /**
     * Apply category filter to layer
     *
     * @param   Zend_Controller_Request_Abstract $request
     * @param   Mage_Core_Block_Abstract $filterBlock
     * @return  Mage_Catalog_Model_Layer_Filter_Category
     */
    protected $_appliedCategory = array();
    public function apply(Zend_Controller_Request_Abstract $request, $filterBlock) {
        $filter = $request->getParam($this->getRequestVar());
        if (preg_match('/^[0-9,]+$/', $filter)) {
            $filter = array_unique(explode(',', $filter));
        }
        if (!is_array($filter) || !count($filter)) {
            return $this;
        }
     $_product_ids = array();
     $category = $this->getCategory();
        Mage::register('current_category_filter', $category);
        foreach ($filter as $_cat_id) {
            $_cat_filter = Mage::getModel('catalog/category')->setStoreId(Mage::app()->getStore()->getId())->load($_cat_id);
            if ($this->_isValidCategory($_cat_filter)){
                    $this->_appliedCategory[] = $_cat_filter;
                    $_new_product_ids =  Mage::getResourceModel('catalog/url')->getProductIdsByCategory( $_cat_id );
                    $_product_ids = array_merge($_product_ids , $_new_product_ids);
            }
        }
        //$this->getLayer()->getProductCollection()->addCategoryFilters($this->_appliedCategory);
        //array(20,30,50);

       // print_r($_url_model);
        $this->getLayer()->getProductCollection()->addIdFilter( $_product_ids );
        foreach ($this->_appliedCategory as $_cat_filter) {
            $this->getLayer()->getState()->addFilter($this->_createItem($_cat_filter->getName(),$_cat_filter->getId()));
        }
        return $this;
    }
 /*
    public function apply(Zend_Controller_Request_Abstract $request, $filterBlock)
    {
        /*$filter = (int) $request->getParam($this->getRequestVar());
        if (!$filter) {
            return $this;
        }
        $this->_categoryId = $filter;
        $category   = $this->getCategory();
        Mage::register('current_category_filter', $category);
        $this->_appliedCategory = Mage::getModel('catalog/category')
            ->setStoreId(Mage::app()->getStore()->getId())
            ->load($filter);
        if ($this->_isValidCategory($this->_appliedCategory)) {
            $this->getLayer()->getProductCollection()
                ->addCategoryFilter($this->_appliedCategory);
            $this->getLayer()->getState()->addFilter(
                $this->_createItem($this->_appliedCategory->getName(), $filter)
            );
        }*/
     /*  $this->_getResource()->applyFilterToCollection($this, $filter);
        return $this;
    }*/
    /**
     * Validate category for be using as filter
     *
     * @param   Mage_Catalog_Model_Category $category
     * @return unknown
     */
    protected function _isValidCategory($category) {
        return $category->getId();
    }
    /**
     * Get filter name
     *
     * @return string
     */
    public function getName() {
        return Mage::helper('catalog')->__('Category');
    }
    /**
     * Get selected category object
     *
     * @return Mage_Catalog_Model_Category
     */
    public function getCategory() {
        /* if (!is_null($this->_categoryId)) {
          $category = Mage::getModel('catalog/category')
          ->load($this->_categoryId);
          if ($category->getId()) {
          return $category;
          }
          }if(Mage::registry("current_category")) return Mage::registry("current_category");
        else{
         if (!is_null($this->_categoryId)) {
          $category = Mage::getModel('catalog/category')
          ->load($this->_categoryId);
          if ($category->getId()) {
          return $category;
          }
          }
          return $this->getLayer()->getCurrentCategory(); 
        }
          return $this->getLayer()->getCurrentCategory(); */
        //return Mage::registry("current_category");
        
        
        if(Mage::registry("current_category")) return Mage::registry("current_category");
        else{
         if (!is_null($this->_categoryId)) {
          $category = Mage::getModel('catalog/category')
          ->load($this->_categoryId);
          if ($category->getId()) {
          return $category;
          }
          }
          return $this->getLayer()->getCurrentCategory(); 
        }
    }
    /**
     * Get filter value for reset current filter state
     *if(Mage::registry("current_category")) return Mage::registry("current_category");
        else{
         if (!is_null($this->_categoryId)) {
          $category = Mage::getModel('catalog/category')
          ->load($this->_categoryId);
          if ($category->getId()) {
          return $category;
          }
          }
          return $this->getLayer()->getCurrentCategory(); 
        }
     * @return mixed
     */
    public function getResetValue() {
        if ($this->_appliedCategory) {
            /**
             * Revert path ids
             */
            foreach ($this->_appliedCategory as $_app_cat) {
                $pathIds = array_reverse($_app_cat->getPathIds());
                $curCategoryId = $this->getLayer()->getCurrentCategory()->getId();
                if (isset($pathIds[1]) && $pathIds[1] != $curCategoryId) {
                    return $pathIds[1];
                }
            }
        }
        return null;
    }
    /**
     * Get data array for building category filter items
     *
     * @return array
     */
    protected function _getItemsData() {
        $key = $this->getLayer()->getStateKey() . '_SUBCATEGORIES';
        $data = $this->getLayer()->getAggregator()->getCacheData($key);
        if ($data === null) {
            //echo "---";
            $category = $this->getCategory();
            /** @var $categoty Mage_Catalog_Model_Categeory */
            $categories = $category->getChildrenCategories();
            // $this->getLayer()->getProductCollection()
            //       ->addCountToCategories($categories);
            $data = array();
            foreach ($categories as $category) {
                if ($category->getIsActive()) {// && $category->getProductCount()) {
                    $_count = Mage::getModel('catalog/layer')->setCurrentCategory( $category )->getProductCollection()->getSize();
                    $data[] = array(
                        'label' => Mage::helper('core')->htmlEscape($category->getName()),
                        'value' => $category->getId(),
                        'count' =>  $_count,
                    );
                }
            }
            $tags = $this->getLayer()->getStateTags();
            $this->getLayer()->getAggregator()->saveCacheData($data, $key, $tags);
        }
        return $data;
    }
    /* public function getItemsCount(){
      return 1;
      } */
}
